<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>English文章</title>
      <link href="/2022/12/09/English%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/09/English%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><ol><li><h3 id="第一课"><a href="#第一课" class="headerlink" title="第一课"></a>第一课</h3><p>Excuse me!</p><p>Yes?</p><p>Is this your handbag?</p><p>Pardon?</p><p>Is this you handbag?</p><p>Yes,it is.</p><p>Thank you very much.</p></li><li><h3 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h3><p><strong>Sorry sir.</strong></p><p>My coat and umbrella please.</p><p>Here is my ticket.</p><p>Thank you sir.</p><p>Number five.</p><p>Here is yuor umbrella.</p><p>This is not my umbrella.</p><p>Sorry sir.</p><p>Is this your umbrella?</p><p>No,it isn’t.</p><p>Is this it?</p><p>Yes, it is.</p><p>Thank you very much.</p></li></ol><ol><li><h3 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h3><p>Good morning.</p><p>Good morning,Mr.Blake.</p><p>This is Miss Sophie Dupont.</p><p>Sophie is a new student.</p><p>She is French.</p><p>Sophie,this is Hans.</p><p>He is German.</p><p>Nice to meet you.</p><p>And this is Naoko.</p><p>She’s Japanses.</p><p>Nice to meet you.</p><p>And this is Chang-woo.</p><p>He’s Korean.</p><p>Nice to meet you.</p><p>And this is Luming.</p><p>He’s Chinese.</p><p>Nice to meet you.</p><p>And tchis is Xiaohui.</p><p>She’s Chinese,too.</p><p>Nice to meet you.</p></li><li><h3 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h3><p><strong>Are you a teacher?</strong></p><p>I an a new student.</p><p>My name’s Robert.</p><p>Nice to meet you.</p><p>My name’s Sophie.</p><p>Are you French?</p><p>Yes,I am.</p><p>Are you French,too?</p><p>No,I am not.</p><p>What nationality are you?</p><p>I’m Italian.</p><p>Are you a tercher?</p><p>No,I’m not.</p><p>What’s your job?</p><p>I’m a keyboard operator.</p><p>What’s your job?</p><p>I’m an engineer.</p></li><li><h3 id="第五课"><a href="#第五课" class="headerlink" title="第五课"></a>第五课</h3><p><strong>How are you today?</strong></p><p>hello,Helen.</p><p>Hi,Steven.</p><p>How are you today?</p><p>I’m very well,Thank you.</p><p>And you?</p><p>I’m dine,thanks.</p><p>How is Tony?</p><p>He’s fine,Thanks.</p><p>How’s Emma?</p><p>She’s very well,too,Helen.</p><p>Goodbye Helen.</p><p>Nice to see you.</p></li><li><h3 id="第六课"><a href="#第六课" class="headerlink" title="第六课"></a>第六课</h3><p><strong>Is this your shirt?</strong></p><p>Whose shirt is that?</p><p>Is this your shirt,Dave?</p><p>No,Sir.</p><p>It’s not my shirt.</p><p>This ismy shirt.</p><p>My shirt’s blue.</p><p>Is this shir Tim’s.</p><p>Perhaps it is white.</p><p>Tim!</p><p>Yes,sir?</p><p>Is this yuor shrt?</p><p>Yes,sir.</p><p>Here you are.Catch!</p><p>Thank,sir.</p></li><li><h3 id="第七课"><a href="#第七课" class="headerlink" title="第七课"></a>第七课</h3><p><strong>A new dress</strong></p><p>What colour’s yor new dress?</p><p>It’s green.</p><p>Come upstairs and see it.</p><p>Thank you.</p><p>look!</p><p>Here it is!</p><p>That’s a nice dress.</p><p>It’s very smart.</p><p>My hat’s new,too.</p><p>What colour is it?</p><p>It’s the same colour.</p><p>It’s green,too.</p><p>That is a lovely hat!</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的Python学习笔记</title>
      <link href="/2022/11/17/python/"/>
      <url>/2022/11/17/python/</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h3 id="如果想输出不换行-可以使用"><a href="#如果想输出不换行-可以使用" class="headerlink" title="如果想输出不换行,可以使用"></a>如果想输出不换行,可以使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="在字符串中有个特殊符号-t-制表符"><a href="#在字符串中有个特殊符号-t-制表符" class="headerlink" title="在字符串中有个特殊符号:\t(制表符)"></a>在字符串中有个特殊符号:\t(制表符)</h3><ul><li>可以使多行字符串进行对齐</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello\tworld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;itxiaoy\tcool&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="for循环的注意点"><a href="#for循环的注意点" class="headerlink" title="for循环的注意点"></a>for循环的注意点</h3><ul><li>无法定义循环条件,只能被动处理</li><li>无法实现无限循环</li></ul><h3 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h3><ol><li><p>range语句的功能是:获得一个数字序列</p></li><li><p>range语句的语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br></pre></td></tr></table></figure></li></ol><p>​    3 .range语句的注意事项:</p><p>语法1从0开始，到num结束（不含num本身)</p><p>语法2从num1开始，到num2结束（不含num2本身)</p><p>语法3从num1开始，到num2结束（不含num2本身)，步长以step值为准</p><h3 id="for循环与while循环可以嵌套使用"><a href="#for循环与while循环可以嵌套使用" class="headerlink" title="for循环与while循环可以嵌套使用"></a>for循环与while循环可以嵌套使用</h3><p>嵌套时需要<strong>注意缩进</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的Java学习笔记</title>
      <link href="/2022/11/14/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/14/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>1.类和对象</p><p><strong>类</strong>:是共同特征的描述(设计图);<strong>对象</strong>:是真实存在的具体实例。</p><p>2.如何得到对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">            <span class="number">1</span>、成员变量（代表属性的,一般是名词)</span><br><span class="line">            <span class="number">2</span>、成员方法（代表行为的,一般是动词)</span><br><span class="line">&#125;</span><br><span class="line">类名 对象名= <span class="keyword">new</span>类名();</span><br></pre></td></tr></table></figure><p>3.拿到对象可以做什么</p><p> <strong>对象.成员变量</strong></p><p><strong>对象.成员方法()</strong></p><ul><li>成员变量:类中方法外的变量</li><li>局部变量:方法中的变量</li></ul><p><strong>注意</strong>:类名<strong>首字母建议大写</strong>，需要见名知意，驼峰模式。</p><p>一个Java文件中可以定义多个class类，且<strong>只能一个类是public</strong>修饰，而且public修饰的类名必须成为代码文件名。</p><p>成员变量的完整定义格式是:<strong>修饰符  数据类型   变量名称=初始化值</strong>;一般无需指定初始化值，存在默认值。</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>1．什么是封装?</p><p>告诉我们，如何正确设计对象的属性和方法。</p><p>原则:<strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong></p><p><strong>举例</strong>:人关门     是人关的门还是门自己关的?</p><p><strong><em>是门自己关的,人只是使用了关门的方法</em></strong></p><p><strong><em>所以方法需要定义在门类中</em></strong></p><p>2.理解封装思想的好处?</p><p>让编程变得很简单，有什么事，找对象，调方法就行。</p><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><ol><li>private关键字是一个权限修饰符</li><li>可以修饰成员（成员变量和成员方法)</li><li>被<strong>private</strong>修饰的成员只能在<strong>本类中才能访问</strong></li><li>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</li><li>提供“setXxx(参数)”方法，用于给<strong>成员变量赋值</strong>，方法用public修饰</li><li>提供“getXxx()”方法，用于<strong>获取成员变量的值</strong>，方法用public修饰</li></ol><p><strong>举例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><ol><li><p>就近原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(age);<span class="comment">//访问局部变量,就近获取age</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.age);<span class="comment">//访问成员变量,获取age</span></span><br></pre></td></tr></table></figure></li><li><p>this的作用</p><p>可以区分成员变量和局部变量</p></li><li><p>this的本质</p><p>代表方法调用者的地址值</p></li></ol><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>1.构造方法的定义</p><ul><li><p>如果<strong>没有定义</strong>构造方法，系统将给出一个<strong>默认的无参数构造方法</strong></p></li><li><p>如果<strong>定义</strong>了构造方法，系统将<strong>不再提供默认</strong>的构造方法</p></li></ul><p>2.构造方法的重载</p><ul><li>带参构造方法，和无参数构造方法，两者方法名相同，但是参数不同，这叫做构造方法的重载</li></ul><p>3.推荐的使用方式</p><ul><li><strong>无论是否使用，都手动书写无参数构造方法，和带全部参数的构造方法</strong></li></ul><p>4.构造方法的作用</p><ul><li>创造对象的时候，由<strong>虚拟机自动调用</strong>，给<strong>成员变量进行初始化的</strong></li></ul><p>5.构造方法有几种，各自的作用是什么?</p><ul><li><p><strong>无参数构造方法:初始化的对象时，成员变量的数据均采用默认值</strong></p></li><li><p><strong>有参数构造方法:在初始化对象的时候，同时可以为对象进行赋值</strong></p></li></ul><p>6.构造方法有哪些注意事项?</p><ul><li><p>任何类定义出来，<strong>默认</strong>就自带了<strong>无参数构造器</strong>，写不写都有。</p></li><li><p><strong>一旦定义了有参数构造器，无参数构造器就没有了，此时就需要自己写无参数构造器了</strong></p></li><li><p>建议在<strong>任何时候都手动写上空参和带全部参数的构造方法</strong></p></li></ul><h1 id="一个标准的JavaBean类"><a href="#一个标准的JavaBean类" class="headerlink" title="一个标准的JavaBean类"></a>一个标准的JavaBean类</h1><p>1.类名需要见名知意</p><p>2.成员变量使用<strong>private</strong>修饰</p><p>3.提供至少两个构造方法</p><ul><li><p><strong>无参构造方法</strong></p></li><li><p><strong>带全部参数的构造方法成员方法</strong></p></li></ul><p>4.成员方法</p><ul><li><p><strong>提供每一个成员变量对应的</strong>setXxx()/getXxx()</p></li><li><p>如果还有其他行为，也需要写上</p></li></ul><h1 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h1><p>1.基本数据类型:<strong>数据值是存储在自己的空间中</strong></p><ul><li>特点:赋值给其他变量，也是赋的<strong>真实的值</strong></li></ul><p>2.引用数据类型:<strong>数据值是存储在其他空间中，自己空间中存储的是地址值</strong></p><ul><li>特点:赋值给其他变量，赋的<strong>地址值</strong></li><li><strong>注意</strong>:如果有<strong>任意一个变量赋值成功</strong>,那么<strong>地址值中的数据发生变化,所有引用的数据都会发生变化</strong></li></ul><h1 id="Scanner键盘录入"><a href="#Scanner键盘录入" class="headerlink" title="Scanner键盘录入"></a>Scanner键盘录入</h1><ol><li><p>第一套体系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nextInt();接收整数</span><br><span class="line">nextDouble();接受小数</span><br><span class="line">next();接收字符串</span><br><span class="line">遇到空格,制表符,回车就会停止接收。这些符号后面的数据就不会接收了</span><br></pre></td></tr></table></figure><p>整数例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(num2);</span><br></pre></td></tr></table></figure><p>字符串例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一个字符串&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();</span><br><span class="line">System.out.println(str1);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二个字符串&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sc.next();</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure></li><li><p>第二套体系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextLine();接收字符串</span><br><span class="line">可以接收空格，制表符，遇到回车才停止接收数据</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一个字符串&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">line1</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">System.out.println(line1);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二个字符串&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">line2</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">System.out.println(line2);</span><br></pre></td></tr></table></figure><p>可以通过强制转化类型来获取想要的数据</p></li><li><p>注意:两套体系<strong>不能混合使用</strong>,会产生混乱数据</p></li></ol><h1 id="String的概述"><a href="#String的概述" class="headerlink" title="String的概述"></a>String的概述</h1><ol><li>String是Java定义好的一个类。定义在java.lang包中，所以使用的时候不需要导包。</li><li>Java程序中的所有字符串文字（例如“abcdefg” ) ,都被实为此类的对象。</li><li>字符串不可变，它们的值在创建后不能被更改</li></ol><h1 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h1><ol><li><code>boolean equals(要比较的字符串)</code>  完全一样的结果才是true,否则为false</li><li><code>boolean equalslgnoreCase(要比较的字符串)</code> 忽略大小写的比较</li></ol><h1 id="StringBuilder的使用"><a href="#StringBuilder的使用" class="headerlink" title="StringBuilder的使用"></a>StringBuilder的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;bcd&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;abc&quot;</span>);<span class="comment">//添加</span></span><br><span class="line">sb.reverse();<span class="comment">//反转字符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();<span class="comment">//查看长度</span></span><br><span class="line">System.out.println(len);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();<span class="comment">//将StringBuilder的属性值变为字符串</span></span><br></pre></td></tr></table></figure><h1 id="ArrayList集合方法"><a href="#ArrayList集合方法" class="headerlink" title="ArrayList集合方法"></a>ArrayList集合方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个集合</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.删除元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> list.remove(<span class="string">&quot;aaa&quot;</span>);<span class="comment">//成功删除会返回true</span></span><br><span class="line">System.out.println(result1);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> list.remove(<span class="string">&quot;ddd&quot;</span>);<span class="comment">//删除失败会返回false</span></span><br><span class="line">System.out.println(result2);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> list.remove(<span class="number">1</span>);<span class="comment">//删除成功会返回删除的元素</span></span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.修改元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> list.set(<span class="number">2</span>, <span class="string">&quot;ddd&quot;</span>);<span class="comment">//会返回修改的元素</span></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.查询元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);<span class="comment">//会将所查询的索引对应的元素返回</span></span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(list);<span class="comment">//打印集合</span></span><br></pre></td></tr></table></figure><h1 id="static静态变量"><a href="#static静态变量" class="headerlink" title="static静态变量"></a>static静态变量</h1><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><ol><li><p>static表示静态,是java中的一个修饰符,可以修饰成员方法和成员变量</p><ul><li><p>定义在类中,如下定义</p></li><li><pre><code class="lang-java">public static 数据类型 名称</code></pre></li></ul></li><li><p>特点:</p><ul><li>被该类中所有对象共享(只要是对象,都可使用)</li><li>不属于对象,属于类</li><li>静态变量是随着类的加载而加载的,优先于对象出现的</li></ul></li><li><p>调用方式</p><ul><li>类名调用(推荐使用)</li><li>对象名调用</li></ul></li></ol><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ol><li>被static修饰的成员方法,叫做静态方法<ul><li>多用在测试类和工具类中</li><li>Javabean类中很少使用</li></ul></li><li>调用方式<ul><li>类名调用(推荐使用)</li><li>对象名调用</li></ul></li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h3 id="什么时候用继承"><a href="#什么时候用继承" class="headerlink" title="什么时候用继承"></a>什么时候用继承</h3><ul><li>当类与类之间，存在<strong>相同(共性</strong>)的内容，<strong>并满足子类是父类中的一种</strong>，就可以考虑使用继承，来优化代码</li></ul><ol><li><p>什么是继承、继承的好处?</p><ul><li>继承是面向对象三大特征之一，可以让类跟类之间产生子父的关系。</li><li>可以把多个子类中重复的代码抽取到父类中，子类可以直接使用，减少代码冗余，提高代码的复用性</li></ul></li><li><p>继承的格式?</p><p><code>public class 子类 extends 父类 &#123;&#125;</code></p></li><li><p>继承后子类的特点?</p><ul><li>子类可以得到父类的属性和行为，子类可以使用。</li><li>子类可以在父类的基础上新增其他功能，子类更强大。</li></ul></li></ol><h3 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h3><ol><li><p>Java只能单继承:一个类只能继承一个直接父类。</p></li><li><p>Java不支持多继承、但是支持多层继承。</p></li><li><p>Java中所有的类都直接或者间接继承于Object类。</p></li><li><p>子类只能访问父类中非私有的成员</p></li></ol><h3 id="子类到底能继承父类中的哪些内容"><a href="#子类到底能继承父类中的哪些内容" class="headerlink" title="子类到底能继承父类中的哪些内容"></a>子类到底能继承父类中的哪些内容</h3><ol><li><p>构造方法</p><p>非私有的和private的都不能</p></li><li><p>成员变量</p><p>非私有的和private的都能,但是private需要用get和set调用</p></li><li><p>成员方法</p><p>在虚方法表中的能,不在虚方法表则不能</p></li></ol><h3 id="继承中的就近原则"><a href="#继承中的就近原则" class="headerlink" title="继承中的就近原则"></a>继承中的就近原则</h3><ol><li><p>继承中成员变量访问特点:<strong>就近原则</strong>。</p><p>先在<strong>局部位置</strong>找，本<strong>类成员位置</strong>找，<strong>父类成员位置</strong>找，逐级往上。</p></li><li><p>如果出现了<strong>重名</strong>的成员变量怎么办?</p><p><code>System.out.println(name);</code>就近原则</p><p><code>System.out.println(this.name);</code>类中</p><p><code>System.out.println(super.name);父类中</code></p></li></ol><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><ol><li>重写方法的名称、形参列表必须与父类中的一致。</li><li>子类重写父类方法时，访问权限子类必须大于等于父类（暂时了解∶空着不写)</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类</li><li><strong>建议:重写的方法尽量和父类保持一致。</strong></li><li>只有被添加到虚方法表中的方法才能被重写</li></ol><h3 id="继承中成员方法重写要点"><a href="#继承中成员方法重写要点" class="headerlink" title="继承中成员方法重写要点"></a>继承中成员方法重写要点</h3><ol><li>继承中成员方法的访问特点:<ul><li>this调用:就近原则。</li><li>super调用:直接找父类。</li></ul></li><li>什么是方法重写?<ul><li>在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类的这个方法是重写的方法。</li></ul></li><li>方法重写建议加上哪个注解，有什么好处?<ul><li>@Override注解可以校验重写是否正确，同时可读性好。</li></ul></li><li>重写方法有哪些基本要求?<ul><li>子类重写的方法尽量跟父类中的方法保持一致。</li><li>只有虚方法表里面的方法可以被重写</li></ul></li></ol><h3 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h3><ol><li>子类不能继承父类的构造方法，但是可以通过super调用</li><li>子类构造方法的第一行，有一个默认的super();</li><li>默认先访问父类中无参的构造方法，再执行自己。</li><li>如果想要方法文父类有参构造，必须手动书写。</li></ol><h3 id="this、super使用总结"><a href="#this、super使用总结" class="headerlink" title="this、super使用总结"></a>this、super使用总结</h3><ul><li>this:理解为一个变量，表示当前方法调用者的地址值;</li><li>super:代表父类存储空间。</li></ul><p><img src="https://bu.dusays.com/2022/11/18/63774b3307edb.png" alt="QQ截图20221105171250-1667639609808-2.png"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h3 id="认识多态"><a href="#认识多态" class="headerlink" title="认识多态"></a>认识多态</h3><ol><li>什么是多态?<ul><li>对象的多种形态。</li></ul></li><li>多态的前提?<ul><li>有继承/实现关系</li><li>有父类引用指向子类对象</li><li>有方法的重写</li></ul></li><li>多态的好处?<ul><li>使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。</li></ul></li></ol><h3 id="多态中调用成员的特点"><a href="#多态中调用成员的特点" class="headerlink" title="多态中调用成员的特点"></a>多态中调用成员的特点</h3><ol><li>调用<strong>成员变量</strong>:<strong>编译看左边，运行也看左边</strong><ul><li>编译看左边: javac编译代码的时候，会看左边的父类中有没有这个变量，如果有，编译成功，如果没有编译失败。</li><li>运行也看左边: java运行代码的时候，实际获取的就是左边父类中成员变量的值</li></ul></li><li>调用<strong>成员方法</strong>:编<strong>译看左边，运行看右边</strong><ul><li>编译看左边: javac编译代码的时候，会看左边的父类中有没有这个方法，如果有，编译成功，如果没有编译失败。</li><li>运行看右边: java运行代码的时候，实际上运行的是子类中的方法。</li></ul></li></ol><h3 id="多态的优势和弊端"><a href="#多态的优势和弊端" class="headerlink" title="多态的优势和弊端"></a>多态的优势和弊端</h3><ol><li>多态的优势<ul><li>方法中，使用父类型作为参数，可以接收所有子类对象</li></ul></li><li>多态的弊端是什么?<ul><li>不能使用子类的特有功能</li></ul></li><li>引用数据类型的类型转换，有几种方式?<ul><li>自动类型转换  <code>Person p = new Student</code></li><li>强制类型转换  <code>Student s = (Student)p</code></li></ul></li><li>强制类型转换能解决什么问题?<ul><li>可以转换成真正的子类类型，从而调用子类独有功能。</li><li>转换类型与真实对象类型不一致会报错</li><li>转换的时候用instanceof关键字进行判断</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于我的一切"><a href="#关于我的一切" class="headerlink" title="关于我的一切"></a>关于我的一切</h1><h3 id="本人是一位某学校在读大二学生-学的是软件专业-不过对于这个专业不太感冒-所以也就学得不咋滴吧"><a href="#本人是一位某学校在读大二学生-学的是软件专业-不过对于这个专业不太感冒-所以也就学得不咋滴吧" class="headerlink" title="本人是一位某学校在读大二学生,学的是软件专业,不过对于这个专业不太感冒,所以也就学得不咋滴吧"></a>本人是一位某学校在读大二学生,学的是软件专业,不过对于这个专业不太感冒,所以也就学得不咋滴吧</h3><h3 id="这个博客创立主要是一时兴起-做个存放资料的地方-虽然也没怎么写东西-图个乐呵"><a href="#这个博客创立主要是一时兴起-做个存放资料的地方-虽然也没怎么写东西-图个乐呵" class="headerlink" title="这个博客创立主要是一时兴起,做个存放资料的地方,虽然也没怎么写东西,图个乐呵"></a>这个博客创立主要是一时兴起,做个存放资料的地方,虽然也没怎么写东西,图个乐呵</h3><h3 id="有一颗不被束缚的心-想做的事情也就三分钟热度-总在思考我为什么而活-就觉得这个年纪总得为自己做点什么-不会让以后的自己看现在的自己那么没劲"><a href="#有一颗不被束缚的心-想做的事情也就三分钟热度-总在思考我为什么而活-就觉得这个年纪总得为自己做点什么-不会让以后的自己看现在的自己那么没劲" class="headerlink" title="有一颗不被束缚的心,想做的事情也就三分钟热度,总在思考我为什么而活,就觉得这个年纪总得为自己做点什么,不会让以后的自己看现在的自己那么没劲"></a>有一颗不被束缚的心,想做的事情也就三分钟热度,总在思考我为什么而活,就觉得这个年纪总得为自己做点什么,不会让以后的自己看现在的自己那么没劲</h3><h3 id="喜欢打游戏-但是没有朋友又不想玩-非常想去一趟大理-希望自己明年能够攒到钱-去入手人生的第一辆车-去买一台马自达323-改装成自己喜欢的样子-而我的遥远目标就是gt86或者brz啦"><a href="#喜欢打游戏-但是没有朋友又不想玩-非常想去一趟大理-希望自己明年能够攒到钱-去入手人生的第一辆车-去买一台马自达323-改装成自己喜欢的样子-而我的遥远目标就是gt86或者brz啦" class="headerlink" title="喜欢打游戏,但是没有朋友又不想玩,非常想去一趟大理!希望自己明年能够攒到钱,去入手人生的第一辆车,去买一台马自达323,改装成自己喜欢的样子,而我的遥远目标就是gt86或者brz啦"></a>喜欢打游戏,但是没有朋友又不想玩,非常想去一趟大理!希望自己明年能够攒到钱,去入手人生的第一辆车,去买一台马自达323,改装成自己喜欢的样子,而我的遥远目标就是gt86或者brz啦</h3><h3 id="我的🐧-2597060966"><a href="#我的🐧-2597060966" class="headerlink" title="我的🐧:2597060966"></a>我的🐧:2597060966</h3><h3 id="我的微信-yqc2597060966"><a href="#我的微信-yqc2597060966" class="headerlink" title="我的微信:yqc2597060966"></a>我的微信:yqc2597060966</h3><h3 id="欢迎前来骚扰"><a href="#欢迎前来骚扰" class="headerlink" title="欢迎前来骚扰!"></a>欢迎前来骚扰!</h3>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(3, 79, 107);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 8 8" width="8px" height="8px"><circle cx="4" cy="4" r="4" opacity="1.0" fill="rgb(57, 197, 187)"/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s="c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function" y(){this.reset="function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity">this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do 2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillstyle="rgba(" +d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*math.pi,!1);for(var t="0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else" h.fillstyle="rgba(" +r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closepath(),h.fill()},this.move="function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x">n-n/4||this.y</0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else></0),this.opacity-=this.do></t;i++){var>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
